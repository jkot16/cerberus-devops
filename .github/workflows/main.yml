name: CI/CD Cerberus

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ci-cd-cerberus-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: cerberus-app
  REGISTRY: docker.io/${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build-test-scan-push-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Setup Python & cache pip
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      # 3. Run tests
      - name: Run tests with pytest
        run: pytest test_app.py

      # 4. Set up Docker Buildx & cache layers
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # 5. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Generate image tags
      - name: Set image tags
        id: meta
        run: |
          echo "TAG=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          echo "LATEST_TAG=latest" >> $GITHUB_OUTPUT

      # 7. Build & push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.LATEST_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to:   type=local,dest=/tmp/.buildx-cache-new

      - name: Save new cache
        if: success()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # 8. Manual install & run Trivy
      - name: Install Trivy manually
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.61.1/trivy_0.61.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.61.1_Linux-64bit.deb

      - name: Scan Docker image with Trivy manually
        run: |
          trivy image --exit-code 0 --ignore-unfixed --severity CRITICAL,HIGH ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.TAG }}

      # 9. Deploy to EC2 via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.TAG }}
            docker stop cerberus || true && docker rm cerberus || true
            docker run -d \
              --name cerberus \
              --restart always \
              -p 80:5000 \
              -e CERBERUS_WEBHOOK_URL=${{ secrets.CERBERUS_WEBHOOK_URL }} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.TAG }}
